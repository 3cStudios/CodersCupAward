@page "/CodeMetrics"


<div class="post-article-container">
    <div class="post-article-left">
        <div class="post-title-bar">

            <h1>What Makes Good Code?</h1>

        </div>
        <div class="post-subtitle-bar">

            By JD - August 17, 2024

        </div>
        <div class="post-article-body">
            <h2>Readability</h2>

            <p>Readability is the most important code quality metric as it leads to higher levels of understanding of the code among other developers. Your code should be easy to read and understand. Because code that's easy to read or understand is easy to improve. Proper indentation, formatting, and spacing make the code more readable. This also makes the code structure more consistent and visible and eases debugging process. The code readability can also be improved by reducing the level of nesting.</p>

            <h2>Testability</h2>

            <p>
                Testability metric measures how well the code supports various testing processes conducted on it. It depends on your ability to control, isolate, and automate tests. You can measure the testability of your code and the number of tests it takes to identify potential faults in the code. The size and the complexity level of the code impact the number of tests it takes to find any errors. Therefore, it is best to test at the code level, such as cyclomatic complexity, to improve testability. Some other best practices to improve testability are:
                <ul>
                    <li>Conduct unit test first</li>

                    <li>Extract all non-testable code into wrapper classes</li>

                    <li>Leverage Inversion of Control / Dependency Injection</li>
                </ul>
            </p>
            <h2>Maintainability</h2>

            <p>
                Code maintainability metric measures how easy it is to make changes to the code while keeping the risks associated with such changes as low as possible. It can be evaluated by the number of lines of code within the application. If these lines are

                more than the average number, then the maintainability is inferred to be low. Some of the best practices to improve maintainability are:

                <ul>

                    <li>The code should be well-designed – it should be as simple as possible, easy to understand, easy to make changes, easy to test, and easy to operate</li>

                    <li>Refactor code</li>

                    <li>Document properly to help developers understand the code</li>

                    <li>Automate build to easily compile the code</li>

                    <li>Leverage automated testing to easily validate changes</li>
                </ul>
            </p>
            <h2>Clarity</h2>
            <p>
                Clarity metric measures how clear the code is. A high-quality code should not be ambiguous. It should be clear enough to be easily understood by other developers without taking much time. Some of the best practices to improve code clarity are:

                <ul>

                    <li>Ensure that your code has straightforward logic and flow-of-control</li>

                    <li>Leverage blank lines to segregate your code into logical sections</li>
                </ul>
            </p>
            <h2>Efficiency</h2>

            <p>
                The Efficiency metric is the measure of the number of assets that are leveraged to build the code. It also considers the time taken to run the code. An efficient code should take less time to build and is easy to debug. Ultimately an efficient code should be on par with the defined requirements and specifications.
            </p>
            <h2>Extensibility</h2>

            <p>
                Extensibility metric measures how well your code can incorporate future changes and growth. Good extensibility indicates that your developers can easily add new features to code or change existing functionality without impacting the performance of the entire system. Leveraging concepts like loose coupling and separation of concerns can make your code more extensible.
            </p>
            <h2>Documentation</h2>

            <p>
                A quality code is defined as code that can be "used long term, can be carried across to future releases and products, without being considered as legacy code". To achieve this, you need documentation. A well-documented code enables other developers to understand it and use it, without much time and effort. Documentation ensures that code is readable as well as maintainable for any developer who deals with it at any point in time.
            </p>
        </div>
        <div class="post-article-footer">
            <div class="author-image-left">
                <img src="/images/JCDHeadShot2_BW.jpg" />
            </div>
            <div class="author-info">
                <p>Jeffery "JD" Dannel is a Father, Software Architect, Golfer, and Orlando Health employee.</p>
            </div>
            <br class="clear" />
        </div>

    </div>
    <div class="post-article-right hide-on-mobile">
        <div class="alert alert-info mb-3">
            <strong><a href="/OrganizationMetric">My Organization's Metrics</a></strong>
            <p>
                See the metrics used to evaluate your code
            </p>
        </div>

        <div class="alert alert-info mb-3">

            <div class="mb-3 align-content-center">
                <strong>
                    <a href="https://www.amazon.com/Adaptive-Code-principles-Developer-Practices-ebook/dp/B071YC5ML9/ref=sr_1_1?crid=2Q7QRUY17YTFU&dchild=1&keywords=adaptive+code+agile+coding+with+design+patterns+and+solid+principles&qid=1602010757&sprefix=Adaptive+Code%2Caps%2C174&sr=8-1
">Looking to Improve?</a>
                </strong>
            </div>

            <div class="right-ad-image mb-3">
                <img src="/images/adaptiveCode.png" />
            </div>
                    
            <p>
                Adaptive Code
                Agile coding with design patterns and SOLID principles 
                (Developer Best Practices) 2nd Edition
            </p>
        </div>
    </div>
</div>
